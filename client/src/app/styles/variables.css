/* 
  ┌────────────────────────────────────────────────────────────┐
  │        Design Token Proxy Layer — @theme Definitions        │
  └────────────────────────────────────────────────────────────┘

  This block defines stable, semantic design tokens used across the UI.
  Each token maps to a runtime variable (e.g. --primary-background), which
  can be overridden by themes like :root or .dark.

  ✅ Stable interface: tokens stay consistent even if theme values change
  ✅ Semantic clarity: separates design intent from implementation
  ✅ Runtime-adaptive: supports dynamic theming via CSS variables

  Example:
    --primary-background-color → var(--primary-background)
    --primary-text-color       → var(--primary-text)

  These tokens are consumed by utility-style classes (see tokens.css),
  and allow JSX to use Tailwind-like notation (e.g. bg-primary-background-color)
  while remaining fully theme-adaptive.

  Note: Do not hardcode values here — always proxy to runtime variables.
*/
@theme {
  /* backgrounds */
  --primary-background-color: var(--primary-background);
  --secondary-background-color: var(--secondary-background);
  --adaptive-button-background-color: var(--button-inversive-background);
  /* texts */
  --primary-text-color: var(--primary-text);
  --secondary-text-color: var(--secondary-text);
  --inversive-text-color: var(--inversive-text);
  /* accents */
  --primary-accent-color: #a259ff;
  --hover-primary-accent-color: #763fbf;

  /* shadows */
  --primary-shadow: 0px 0px 20px -3px rgba(2, 3, 16, 1);
  --secondary-shadow: 0px 0px 22px -6px rgba(18, 19, 19, 0.83);
}
