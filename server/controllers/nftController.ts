// üìå –¶–µ–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –æ—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ NFT –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
// –í—ñ–Ω —Ä–æ–±–∏—Ç—å –∫—ñ–ª—å–∫–∞ —Ä–µ—á–µ–π:
// 1. –ß–∏—Ç–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –∑–∞–ø–∏—Ç—É (authorId, galleryId, sold, page, limit).
// 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î authorId —Ç–∞ galleryId –≤–∞–ª—ñ–¥–Ω–∏–º–∏ ObjectId —ñ –¥–æ–¥–∞—î —ó—Ö —É —Ñ—ñ–ª—å—Ç—Ä.
// 3. –î–æ–¥–∞—î —É–º–æ–≤—É –∑–∞ –ø–æ–ª–µ–º sold, —è–∫—â–æ –≤–æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–µ.
// 4. –†–µ–∞–ª—ñ–∑—É—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é (skip + limit).
// 5. –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –¥–æ MongoDB –∑ .populate(), —â–æ–± –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –¥–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∞.
// 6. –†–∞—Ö—É—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ.
// 7. –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±‚Äô—î–∫—Ç —ñ–∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É JSON.

import { Request, Response } from "express";
import mongoose from "mongoose";
import Nft, { INft } from "../models/Ntf";
import { ImageRequest, IRequest } from "../types/types";
import axios from "axios";
import FormData from "form-data";
import { handleControllerError } from "../utils/handleControllerError";

// ---------------------------------üß© get NFT
export const getNft = async (req: Request, res: Response) => {
  try {
    const {
      authorId,
      galleryId,
      categoryId,
      sold,
      page = 1,
      limit = 12,
      keywords,
    } = req.query;

    //  —Ñ—ñ–ª—å—Ç—Ä
    // const filter: Partial<INft> = {};
    const filter: any = {};
    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if (authorId && mongoose.Types.ObjectId.isValid(authorId as string))
      filter.authorId = new mongoose.Types.ObjectId(authorId as string);
    if (galleryId && mongoose.Types.ObjectId.isValid(galleryId as string))
      filter.galleryId = new mongoose.Types.ObjectId(galleryId as string);
    if (categoryId && mongoose.Types.ObjectId.isValid(categoryId as string))
      filter.category = new mongoose.Types.ObjectId(categoryId as string);

    if (sold !== undefined) filter.sold = sold === "true";

    if (keywords) {
      const arrKeys = (keywords as string)
        .split(",")
        .map((elem) => elem.trim());
      filter.keywords = { $in: arrKeys };
    }

    // –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    const skip = (Number(page) - 1) * Number(limit);

    //  –∑–∞–ø–∏—Ç –∑ populate
    const nfts = await Nft.find(filter)
      .populate("authorId", "userName userMail")
      .skip(skip)
      .limit(Number(limit));

    //   –≤—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ (–¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
    const total = await Nft.countDocuments(filter);

    res.json({
      page: Number(page),
      limit: Number(limit),
      total,
      pages: Math.ceil(total / Number(limit)),
      items: nfts,
    });
  } catch (error: any) {
    const errorMessage = "failedToGetNftList";
    return handleControllerError(error, res, errorMessage);
    // if (error.response) {
    //   return res
    //     .status(error.response.status)
    //     .json({ error: error.response.data });
    // }
    // return res.status(500).json({ error: error.message });
  }
};

// -------------------------------------üß© set NFT
export const setNft = async (req: IRequest, res: Response) => {
  let {
    name,
    description,
    imageUrl,
    deleteImageUrl,
    authorId,
    galleryId,
    price,
    sold,
    likes,
    views,
    keywords,
    categoryId,
  } = req.body;

  // userId –ø–µ—Ä–µ–¥–∞–Ω–∏–π –º—ñ–¥–¥–ª–≤–∞—Ä–æ–º
  const userId = req.userId;

  // const categoryId = await Category.findOne({ _id: category });

  try {
    const newItem: Partial<INft> = {
      name,
      imageUrl,
      deleteImageUrl,
      description,
    };
    if (!userId) return res.status(401).json({ message: "accessDenied" });

    if (categoryId === null) newItem.category = undefined;

    if (categoryId && mongoose.Types.ObjectId.isValid(categoryId)) {
      newItem.category = new mongoose.Types.ObjectId(categoryId as string);
    }
    newItem.authorId = new mongoose.Types.ObjectId(userId);

    // if (!name) return res.status(400).json({ message: "Name is required" });
    // if (!imageUrl)
    //   return res.status(400).json({ message: "Image is required" });

    // // —â–æ–± –Ω–µ –∑–∞—Ç–∏—Ä–∞–≤—Å—è 0 –±–æ 0 —Å–ø—Ä–∞—Ü—é—î —è–∫ "falsey"
    // if (price === undefined)
    //   return res.status(400).json({ message: "Price is required" });

    // if (!keywords || (Array.isArray(keywords) && keywords.length < 3))
    //   return res.status(400).json({ message: "Need at least three keywords" });

    // if (!description)
    //   return res.status(400).json({ message: "Description is required" });

    //  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è galleryId
    if (galleryId === null) newItem.galleryId = undefined;

    if (galleryId && mongoose.Types.ObjectId.isValid(galleryId as string)) {
      newItem.galleryId = new mongoose.Types.ObjectId(galleryId as string);
    }

    //  –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤
    if (price !== undefined) newItem.price = Number(price);
    if (sold !== undefined) {
      newItem.sold = sold === "true" || sold === true;
      // if (sold === "true" || sold === true) newItem.sold = true;
      // if (sold === "false" || sold === false) newItem.sold = false;
    }

    if (likes !== undefined) newItem.likes = Number(likes);
    if (views !== undefined) newItem.views = Number(views);

    newItem.keywords = Array.isArray(keywords)
      ? keywords.map((elem: string) => elem.trim())
      : keywords.split(",").map((elem: string) => elem.trim());

    //  –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    const nft = new Nft(newItem);

    //  –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ë–î
    await nft.save();

    res.status(201).json({ message: "nftAdded", item: nft });
  } catch (error: any) {
    const errorMessage = "failedToCreateNft";
    return handleControllerError(error, res, errorMessage);
    // if (error.response) {
    //   return res.status(error.response).json({ error: error.response.data });
    // }
    // return res.status(500).json({ error: error.message });
  }
};

// ------------------------------üß© patch NFT
export const patchNft = async (req: IRequest, res: Response) => {
  try {
    const {
      name,
      imageUrl,
      galleryId,
      price,
      keywords,
      description,
      deleteImageUrl,
    } = req.body;

    const { id } = req.params; // id NFT –∑ URL

    // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î  id NFT –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "invalidNftId" });
    }

    // –∑–Ω–∞—Ö–æ–¥–∏–º–æ nft
    const nft = await Nft.findById(id);
    if (!nft) return res.status(404).json({ message: "nftNotFound" });

    //  –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ  —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è authorId –∑ nft —Ç–∞ userId –∑ –º—ñ–¥–¥–ª–≤–∞—Ä
    const isAuthor = nft.authorId?.toString() == req.userId; //userId –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –º—ñ–¥–ª–≤–∞—Ä–æ–º
    const isAdmin = req.roles?.includes("ADMIN");

    if (!isAuthor && !isAdmin) {
      return res.status(403).json({ message: "accessDenied" });
    }

    // –ù–æ–≤—ñ –¥–∞–Ω—ñ
    const updateData: Partial<INft> = {};

    // –¢—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —ñ–º'—è, –æ–ø–∏—Å —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ,
    if (isAuthor) {
      if (name !== undefined) updateData.name = name;
      if (imageUrl !== undefined) updateData.imageUrl = imageUrl;
      if (deleteImageUrl !== undefined)
        updateData.deleteImageUrl = deleteImageUrl;
      if (description !== undefined) updateData.description = description;
    }

    if (keywords !== undefined) {
      const keys = Array.isArray(keywords)
        ? keywords.map((k: string) => k.trim())
        : keywords.split(",").map((k: string) => k.trim());

      if (keys.length >= 3) updateData.keywords = keys;
    }

    if (price !== undefined) updateData.price = Number(price);

    // —Å–∫–∏–¥–∞—î–º–æ –≥–∞–ª–µ—Ä–µ—é
    if (galleryId === null) {
      updateData.galleryId = undefined;
    }

    if (galleryId && mongoose.Types.ObjectId.isValid(galleryId as string)) {
      updateData.galleryId = new mongoose.Types.ObjectId(galleryId as string);
    }

    // –ø–∞—Ç—á–∏–º–æ –¥–∞–Ω—ñ
    const updatedNft = await Nft.findByIdAndUpdate(id, updateData, {
      new: true, // –≤–µ—Ä—Ç–∞—î–º–æ –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
      runValidators: true, // mongoose –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –¥–∞–Ω—ñ –∑–∞ —Å—Ö–µ–º–æ—é –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ update
    });

    res.status(200).json({ message: "nftChanged", item: updatedNft });
  } catch (error: any) {
    const errorMessage = "failedToUpdateNft";
    return handleControllerError(error, res, errorMessage);
    // if (error.response) {
    //   return res
    //     .status(error.response.status)
    //     .json({ message: error.response.data });
    // }
    // return res.status(500).json({ error: error.message });
  }
};

// --------------------------üß© delete NFT
export const deleteNFT = async (req: IRequest, res: Response) => {
  try {
    const { id } = req.params;
    const { userId } = req;

    // const nft = await Nft.findById(id).populate<{ authorId: IUser }>(
    //   "authorId"
    // );

    // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î  id NFT –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "invalidNftId" });
    }

    const nft = await Nft.findById(id);
    const deleteImageUrl = nft?.deleteImageUrl;

    if (!nft) return res.status(404).json({ message: "nftNotFound" });

    //–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—â–æ —é–∑–µ—Ä –∑ nft –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ —é–∑–µ—Ä–æ–º –∑ req –∞–±–æ —è–∫—â–æ —Ä–æ–ª—å –Ω–µ ADMIN
    if (nft.authorId?.toString() !== userId && !req.roles?.includes("ADMIN")) {
      return res.status(403).json({ message: "accessDenied" });
    }

    await nft.deleteOne();

    // const deletedNft = await Nft.findByIdAndDelete(id);

    //?  ‚ö†Ô∏è--- delete image in imageBB
    // if (deleteImageUrl) {
    //   console.log(deleteImageUrl);

    //   await axios.get(deleteImageUrl);
    // }
    // res.status(500).json({
    //   message: `Error deleting image from ImgBB`,
    // });
    //? ---------------------------

    return res
      .status(200)
      .json({ message: "nftDeleted", item: nft.toObject() }); //–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—á–∏ –≤ –æ–±'—î–∫—Ç —â–æ–± –∑–∞–±—Ä–∞—Ç–∏ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è
  } catch (error: any) {
    const errorMessage = "failedToDeleteNft";
    return handleControllerError(error, res, errorMessage);
  }
};

// --------------------------üß© send NFT image to imgBB
export const setNftImage = async (req: ImageRequest, res: Response) => {
  try {
    const apikey = process.env.IMGBB_API_KEY;
    const file = req.file;

    if (!req.userId) return res.status(403).json({ message: "accessDenied" });

    if (!file) return res.status(400).json({ message: "fileNotFound" });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ base64
    const base64 = file.buffer.toString("base64");

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ ImgBB
    // FormData –¥–ª—è Node.js
    const formData = new FormData();
    formData.append("image", base64);
    formData.append("name", `${req.body.name || ""}:nft-gallery-bd`);
    // formData.append("name", "nft-gallery-bd");

    const response = await axios.post(
      `https://api.imgbb.com/1/upload?key=${apikey}`,
      formData,
      {
        headers: formData.getHeaders(),
        timeout: 20000,
      }
    );

    const imageUrl = response.data.data.url;
    const deleteImageUrl = response.data.data.delete_url;
    const imageTitle = response.data.data.title;

    return res
      .status(200)
      .json({ message: "imageUploaded", imageUrl, deleteImageUrl, imageTitle });
  } catch (error: any) {
    const errorMessage = "failedToUploadImage";
    return handleControllerError(error, res, errorMessage);

    // if (error.response) {
    //   return res
    //     .status(error.response.status)
    //     .json({ message: error.response.data });
    // }
    // return res.status(500).json({ message: error.message || "Unknown error" });
  }
};
// export const setNftImage = async (req: ImageRequest, res: Response) => {
//   try {
//     const apikey = process.env.IMGBB_API_KEY;
//     const file = req.file;

//     console.log(file);

//     if (!file) return res.status(400).json({ message: "File not found" });

//     // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ base64
//     const base64 = file.buffer.toString("base64");

//     // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ ImgBB
//     // FormData –¥–ª—è Node.js
//     const formData = new FormData();
//     formData.append("image", base64);

//     // POST-–∑–∞–ø—Ä–æ—Å –∫ ImgBB
//     const instance = axios.create({
//       baseURL: `https://api.imgbb.com/1/upload?key=${apikey}`,
//       method: "POST",
//       timeout: 20000,

//       headers: formData.getHeaders(),
//     });

//     // axios.post(`https://api.imgbb.com/1/upload?key=${apikey}`);
//     const response = await instance.post("", formData);
//     const imageUrl = response.data.url;
//     return res.status(200).json({ message: "Image upload", imageUrl });
//   } catch (error: any) {
//     if (error.response) {
//       return res
//         .status(error.response.status)
//         .json({ message: error.response.data });
//     }
//     return res.status(500).json({ message: error.message || "Unknown error" });
//   }
// };
