// üìå –¶–µ–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –æ—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ NFT –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
// –í—ñ–Ω —Ä–æ–±–∏—Ç—å –∫—ñ–ª—å–∫–∞ —Ä–µ—á–µ–π:
// 1. –ß–∏—Ç–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –∑–∞–ø–∏—Ç—É (authorId, galleryId, sold, page, limit).
// 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î authorId —Ç–∞ galleryId –≤–∞–ª—ñ–¥–Ω–∏–º–∏ ObjectId —ñ –¥–æ–¥–∞—î —ó—Ö —É —Ñ—ñ–ª—å—Ç—Ä.
// 3. –î–æ–¥–∞—î —É–º–æ–≤—É –∑–∞ –ø–æ–ª–µ–º sold, —è–∫—â–æ –≤–æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–µ.
// 4. –†–µ–∞–ª—ñ–∑—É—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é (skip + limit).
// 5. –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –¥–æ MongoDB –∑ .populate(), —â–æ–± –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –¥–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∞.
// 6. –†–∞—Ö—É—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ.
// 7. –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±‚Äô—î–∫—Ç —ñ–∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É JSON.

import { Request, Response } from "express";
import Nft, { INft } from "../models/Ntf";
import mongoose from "mongoose";
import { IUser } from "../models/User";
import { IRequest } from "../types/role";

// type Roles = "USER" | "ADMIN";

// interface IRequest extends Request {
//   userId?: string;
//   roles?: Roles;
// }

// ---------------------------------üß© get NFT
export const getNft = async (req: Request, res: Response) => {
  try {
    const { authorId, galleryId, sold, page = 1, limit = 12 } = req.query;

    //  —Ñ—ñ–ª—å—Ç—Ä
    const filter: Partial<INft> = {};
    // const filter: any = {};
    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if (authorId && mongoose.Types.ObjectId.isValid(authorId as string))
      filter.authorId = new mongoose.Types.ObjectId(authorId as string);
    if (galleryId && mongoose.Types.ObjectId.isValid(galleryId as string))
      filter.galleryId = new mongoose.Types.ObjectId(galleryId as string);

    if (sold !== undefined) filter.sold = sold === "true";

    // –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    const skip = (Number(page) - 1) * Number(limit);

    //  –∑–∞–ø–∏—Ç –∑ populate
    const ntfs = await Nft.find(filter)
      .populate("authorId", "userName userMail")
      .skip(skip)
      .limit(Number(limit));

    //   –≤—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ (–¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
    const total = await Nft.countDocuments(filter);

    res.json({
      page: Number(page),
      limit: Number(limit),
      total,
      pages: Math.ceil(total / Number(limit)),
      items: ntfs,
    });
  } catch (error) {
    if (error instanceof Error) {
      res.status(500).json({ error: error.message });
    }
  }
};

// -------------------------------------üß© set NFT
export const setNft = async (req: IRequest, res: Response) => {
  let { name, imageUrl, authorId, galleryId, price, sold } = req.body;

  // userId –ø–µ—Ä–µ–¥–∞–Ω–∏–π –º—ñ–¥–¥–ª–≤–∞—Ä–æ–º
  const userId = req.userId;

  try {
    const newItem: Partial<INft> = {
      name,
      imageUrl,
    };

    if (!name) return res.status(400).json({ message: "Name id required" });
    if (!imageUrl)
      return res.status(400).json({ message: "Image id required" });
    if (!price) return res.status(400).json({ message: "Price id required" });

    if (!userId) return res.status(401).json({ message: "No access" });

    newItem.authorId = new mongoose.Types.ObjectId(userId);

    //  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è authorId
    // if (authorId && mongoose.Types.ObjectId.isValid(authorId as string)) {
    //   newItem.authorId = new mongoose.Types.ObjectId(authorId as string);
    // } else {
    //   return res.status(400).json({ error: "Invalid authorId" });
    // }

    //  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è galleryId
    if (galleryId && mongoose.Types.ObjectId.isValid(galleryId as string)) {
      newItem.galleryId = new mongoose.Types.ObjectId(galleryId as string);
    }

    //  –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤
    if (price !== undefined) newItem.price = Number(price);
    if (sold !== undefined) {
      newItem.sold = sold === "true" || sold === true;
      // if (sold === "true" || sold === true) newItem.sold = true;
      // if (sold === "false" || sold === false) newItem.sold = false;
    }

    //  –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    const nft = new Nft(newItem);

    //  –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ë–î
    await nft.save();

    res.status(201).json({ message: "item added", item: nft });
  } catch (error) {
    if (error instanceof Error) {
      res.status(500).json({ error: error.message });
    }
  }
};

// ------------------------------üß© patch NFT
export const patchNft = async (req: IRequest, res: Response) => {
  try {
    const { name, imageUrl, galleryId, price } = req.body;
    const { id } = req.params; // id NFT –∑ URL

    // –∑–Ω–∞—Ö–æ–¥–∏–º–æ nft
    const nft = await Nft.findById(id);
    if (!nft) return res.status(404).json({ message: "NFT not found" });

    // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î  id NFT –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "Invalid NFT ID" });
    }

    //  –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ  —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è authorId –∑ nft —Ç–∞ userId –∑ –º—ñ–¥–¥–ª–≤–∞—Ä
    if (nft.authorId?.toString() !== req.userId) {
      return res.status(403).json({ message: "No access" });
    }

    const updateData: Partial<INft> = {};
    if (name !== undefined) updateData.name = name;
    if (imageUrl !== undefined) updateData.imageUrl = imageUrl;
    if (price !== undefined) updateData.price = price;

    if (galleryId === null) {
      updateData.galleryId = undefined;
    }
    if (galleryId && mongoose.Types.ObjectId.isValid(galleryId as string)) {
      updateData.galleryId = new mongoose.Types.ObjectId(galleryId as string);
    }
    // –ø–∞—Ç—á–∏–º–æ –¥–∞–Ω—ñ
    const updatedNft = await Nft.findByIdAndUpdate(id, updateData, {
      new: true, // –≤–µ—Ä—Ç–∞—î–º–æ –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
      runValidators: true, // mongoose –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –¥–∞–Ω—ñ –∑–∞ —Å—Ö–µ–º–æ—é –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ update
    });

    res.status(200).json({ message: "Element changed", item: updatedNft });
  } catch (error) {
    if (error instanceof Error) {
      res.status(500).json({ error: error.message });
    }
  }
};

// --------------------------üß© delete NFT
export const deleteNFT = async (req: IRequest, res: Response) => {
  try {
    const { id } = req.params;
    const { userId } = req;

    // const nft = await Nft.findById(id).populate<{ authorId: IUser }>(
    //   "authorId"
    // );

    // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î  id NFT –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "Invalid NFT ID" });
    }

    const nft = await Nft.findById(id);

    if (!nft) return res.status(404).json({ message: "NFT not found" });

    //–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—â–æ —é–∑–µ—Ä –∑ nft –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ —é–∑–µ—Ä–æ–º –∑ req –∞–±–æ —è–∫—â–æ —Ä–æ–ª—å –Ω–µ ADMIN
    if (nft.authorId?.toString() !== userId && !req.roles?.includes("ADMIN")) {
      return res.status(403).json({ message: "No access" });
    }

    await nft.deleteOne();
    // const deletedNft = await Nft.findByIdAndDelete(id);
    return res
      .status(200)
      .json({ message: "NFT deleted", item: nft.toObject() }); //–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—á–∏ –≤ –æ–±'—î–∫—Ç —â–æ–± –∑–∞–±—Ä–∞—Ç–∏ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è
  } catch (error) {
    if (error instanceof Error) {
      return res.status(500).json({ error: error.message });
    }
  }
};
